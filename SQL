-- change dates of missing values to null
update member_a set cancel_date = NULL where cancel_date = '';
update member_a set cancel_date = str_to_date(cancel_date, '%Y-%m-%d');

-- Improving Activation Rate - Trial Length
-- Trials and Activation %

-- counting activated vs non activated accs
WITH activations AS 
(
SELECT
		MIN(created_date) AS month,
        SUM(CASE WHEN has_activated like 'Yes' THEN 1 ELSE 0 END) AS activated,
        SUM(CASE WHEN has_activated like 'No' THEN 1 ELSE 0 END) AS not_activated
FROM
		member_a
GROUP BY 
		MONTH(created_date)
),

-- count unique accs created
accounts_created AS
(
SELECT
		COUNT(DISTINCT account_id) AS num_acc,
        MIN(created_date) AS start_month
FROM
		member_a
GROUP BY 
		MONTH(created_date)
)

SELECT
		DATE_FORMAT(activations.month, '%b-%Y') as created_month,
        (activated/(activated + not_activated))*100 AS activated_rate,
        num_acc
FROM
	activations
		JOIN accounts_created ON activations.month = accounts_created.start_month
GROUP BY 1
ORDER BY MONTH(activations.month);



-- 100% stacked activated vs not activated

WITH counts AS
(
SELECT
        SUM(CASE WHEN has_activated like 'Yes' THEN 1 ELSE 0 END) AS activated,
        SUM(CASE WHEN has_activated like 'No' THEN 1 ELSE 0 END) AS not_activated,
        count(account_id) as count_id
FROM
		member_a
)

SELECT
		FORMAT(activated/count_id,2) AS activated_percent,
		FORMAT(not_activated/count_id,2) AS not_activated_percent
FROM
		counts

-- Activated vs Not activated

WITH counts AS
(
SELECT
        SUM(CASE WHEN has_activated like 'Yes' THEN 1 ELSE 0 END) AS activated,
        SUM(CASE WHEN has_activated like 'No' THEN 1 ELSE 0 END) AS not_activated,
        count(account_id) as count_id
FROM
		member_a
)

SELECT
		FORMAT(activated/count_id,2) AS activated_percent,
		FORMAT(not_activated/count_id,2) AS not_activated_percent
FROM
		counts;


-- Trial Days


SELECT
		count(account_id) AS num_accounts,
        trial_days,
        activated
FROM (
SELECT
		datediff(initial_trial_end_date, created_date) AS trial_days,
        account_id,
        has_activated AS activated
FROM 
		member_a
        ) as table_1
grOUP by 2,3
order by 3,2



-- Activation by Sign up Source

SELECT
		sum(count_acc) OVER( PARTITION BY signup_source ORDER BY month) as running_total,
		  signup_source,
          month
FROM
(
SELECT
count(account_id) AS count_acc,
		  signup_source,
          month(created_date) as month
FROM member_a
where 
		has_activated like 'yes'
        and signup_source not like ''
group by 2,3) as table_1;


order by 2,3

--- Activation rate of feature usage
SELECT
		count(account_id) AS count_acc,
        has_activated,
        uploaded_video_durring_trial
FROM
		member_a
GROUP BY 2,3
ORDER BY 3 DESC
;
